# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2023-06-26 01:03
from django.db import migrations, models

def forwards_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    conn = schema_editor.connection
    with conn.cursor() as cur:
        for name in ("observations_video_completed_by","auth_user_user_permissions","auth_user_groups"):
            cur.execute("SELECT count(1) FROM information_schema.columns WHERE table_schema = 'public' AND table_name = '{0}' and column_name='penguinuser_id';".format(name))
            rows =  cur.fetchone()[0]
            if rows == 0:
                #the column name is not penguinuser_id, no need to change 
                print("The column 'penguinuser_id' does not exist in the table '{0}', no need to change".format(name))
                continue
    
            print("Try to change the column 'penguinuser_id' of the table '{0}' to 'user_id'".format(name))
            cur.execute("ALTER TABLE {0} RENAME COLUMN penguinuser_id TO user_id;".format(name))

        #change the length and nullable of the columns  of table 'auth_user' if required
        for col,length,isnullable in [("email",254,False),("username",150,False),("last_login",None,True)]:
            cur.execute("SELECT character_maximum_length,is_nullable FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'auth_user' and column_name='{}';".format(col))
            data = cur.fetchone()
            if not data:
                raise("Can't find the column({0}) in table(auth_user)".format(col))
            if length is not None:
                if data[0] < length:
                    #length is different 
                    print("Try to change the length of the column '{0}' of the table 'auth_user' from {1} to {2}".format(col,data[0],length))
                    cur.execute("alter table auth_user alter column {0} type varchar({1});".format(col,length))
                else:
                    print("The length({1}) of the column '{0}' of the table 'auth_user' is not less than {2}, no need to change".format(col,data[0],length))

            if isnullable != (data[1].upper() == "YES"):
                print("Try to change the nullable of the column '{0}' of the table 'auth_user' from {1} to {2}".format(col,data[1].upper() == "YES",isnullable))
                if isnullable:
                    cur.execute("alter table auth_user alter column {0} drop not null;".format(col))
                else:
                    cur.execute("alter table auth_user alter column {0} set not null;".format(col))
            else:
                print("The column '{0}' of the table 'auth_user' is already {1},no need to change".format(col,"nullable "if isnullable else "not nullable"))


def reverse_func(apps, schema_editor):
    # do nothing
    pass
    
class Migration(migrations.Migration):

    dependencies = [
        ('observations', '0002_auto_20230626_0903'),
    ]

    operations = [
        migrations.RunPython(forwards_func, reverse_func)
    ]
